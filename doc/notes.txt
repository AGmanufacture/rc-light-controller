This document contains various architecture related documentation that
were written during early stages of development.


=============================================================================
NOTE: Steering channel vs. Steering wheel servo

The light controller can generate an output signal that can be connected to
a servo; this servo may drive a steering wheel in the body of the RC car to
make it look as if the driver is actually driving the car.
In the context of the light controller this function is called "steering wheel
servo".

The "Steering wheel servo" is independent of "steering". "steering", or
"steering channel" refers to the servo output on your receiver, usually
channel 1, that connects to the servo that changes direction on your vehicle.
"steering" is abbreviated as ST.

Having an independent "steering wheel servo" output allows to setup
centre, endpoints and direction on the steering wheel independent of the
needs for your car's steering.
=============================================================================



There are difference implementations of CH3 (AUX) that can be found in RC car
transmitters:

- Hard switch: on/off positions (i.e. HK 310, Turnigy 3XS)

- Toggle button: press=on, press again=off (i.e. FlySky GT3B)

- Momentary button: press=on, release=off (Futaba 4PL)



Measuring the 3 servo channels:
===============================
The "Arduino OpenSourceLights" measure all 3 channels in turn, with a
21 ms timeout. This means worst one needs to wait 3 "rounds" each 20ms
until all 3 channels have been measured. That's 60 ms, which is still very
low (usually tact switches are de-bounced with 40 ms).

So the pseudo code should look like:

    main
        wait for CH3 = Low
        wait for CH3 = High
        start TMR1
        wait for CH3 = Low
        stop TMR1
        save CH1 timing value

        (repeat for CH2, CH1 (if present))

        process channels
        switch lights according to new mode
        send lights and steering to slave via UART (3 bytes)

        goto main

On newer MCUs the timer hardware can "capture" the pulse width on an external
IO. This is preferred as it is more precise.
The PIC16F1825 can only measure one GPIO. The LPC812 can measure all 3 channels
at the same time, independently.


Robustness matters:
===================
A servo signal should come every 20 ms. OpenSourceLights says in their
comment that they meassured "~20-22ms" between pulses. So for the safe
side let's assume that worst case we wait 25 ms for a servo pulse.

Modern digital RC receivers output a servo pulse even if the connection to the
transmitter is lost. Therefore the light controller can not signal that
failsafe has triggered.



Discussion on the protocol to use between the master and the slave:
AKA: pre-processor protocol
===================================================================

First, CPPM was considered.
Each pulse is 300us,
Data: 1000-2000 us full range, 1500 us = center (includes pulse width!)
    Allow for: 770-2350 us
Repeated every 20ms
=> 8 channels worst case: 8 * 2100 us =  16800 us
=> space between transmissions minimum: -20000 = 3200 us
=> 9 channels don't fit!

We are dealing with 3 RC channels. A channel has a signal of max 2.1 ms
that is repeated every 20 ms. Hoever, there is no specification in which
sequence and with which timing the receiver outputs the individual channels.
Worst case there is only 6.85 ms between the channels. As such we can
not send the PPM signal synchronously between reading the channels with a
pure software approach.

Using interrupts may be critical too, as we need precision. Lets assume we
want to divide the servo range of 1 ms to 2 ms in 200 steps (100% in each
direction as e.g. EPA in transmitters works). This requires a resolution
of 5 us -- which is just 5 instruction cycles (1 MHz instruction clock).
No way to finish processing interrupts this way.


UART approach:
==============
UART at 38400 BAUD is fast enough to send 3 bytes between measuring servo
pulses.

UART protocol for the TLC5916 based master/slave design:
========================================================
3 Bytes: SYNC, Lights, Lights-half, ST
    SYNC:       Always 0x80..0x87, which does not appear in the other values
                If a slave receives 0x87 the data is processed.
                If the value is 0x86..0x80 then it increments the value
                by 1 and sends all 3 received bytes at its output.
                This provides us with a simple way of daisy-chaining
                several slave modules!
                Note: Currently the software only drives a single slave.
    Lights:     Each bit indicates a different light channel (0..6)
    Lights-half:Each bit indicates a different light channel (0..6) for
                outputs that shall be on in half brightness. Note that if
                the same bit is set in "Lights" then the output will be
                fully on (i.e. full brightness takes precedence over half
                brightness).
    ST:         Steering wheel servo data: -120 - 0 - +120



Flashing speed for hazard and indicators:
=========================================
1.5 Hz = 333 ms per half-period



Auto configuration:
===================
In order to avoid having to setup the light controller manually every time
something is changed on the vehicle RC system, automatic configuration
shall be employed.

The assumption is that both throttle and steering are in Neutral on power
on. So at startup we measure the servo signals and treat them as neutral.

The end-points are set to 200us (configurable throught INITIAL_ENDPOINT_DELTA)
initially and "grow" when servo signals are received that are larger than
the current value (up to the maximum of 800 and 2300 us respectively where
we clamp servo signals).

Depending on your servo and ESC installation, the servo and throttle may
be reversed.
In the original design we had throttle and steering direction auto-detect.
It was assumed that the user pushes the throttle forward and the steering
to left as first operation after powering up the car.
In practice this caused confusion for some users, and we resorted to store
the servo reversing persistently.
Servo reversing is configured by performing 7 clicks on CH3, then pushing
the throttle forward and the steering to the direction of the indicators
that light up.



TX/RX system findings:
======================
In general the jitter is 3 us, which is expected given that it takes about
3 instructions (PIC16F628 at 4 MHz) to detect a port change and start/stop
the timer.

GT3B:
    EPA can be +/- 120 %
    Normal range (trim zero, 100% EPA): 986 .. 1568 .. 2120
    Trim range: 1490 .. 1568 .. 1649  (L30 .. N00 .. R30)
    Worst case with full EPA and trim: 870 .. 2300 (!)
    Failsafe: Servo signal holds for about 500ms, then ST and CH3 stops and
      TH outputs 1500us (configurable?)
    CH3: 1058, 2114

    Output sequence: TH, ST, CH3 (measured on HK-GT2R receiver). There is about
    2us gap between the channels

    The repeat frequency of servo pulses is about 18.5 ms.

    The receiver internally operates at 3.3V and has a simple boost converter
    that generates 5V if the input voltage is lower than 5V before feeding
    the 3.3V LDO.

HK-310:
    EPA can be +/- 120 %
    Normal range (sub-trim and trim zero, 100% EPA): 1073 .. 1568 .. 2117
    Sub-Trim range: 1232 .. 1565 .. 1901  (-100 .. 0 .. 100)
    Trim range: 1388 .. 1568 .. 1745
    Worst case with full EPA and sub-trim and trim: 779 .. 2327 (!)
    Failsafe: Continously sends ST centre, TH off, CH3 holds last value
    CH3: 1013 = AUX, 2120 = OFF

    By default all channels are set to "REV" strangely. This means:
    ST: left means smaller values
    TH: fwd means larger values
    CH3: AUX means small value, OFF means large value (note: it is easy to
            place in the switch physically in both directions when assembling
            the transmitter, so different HK310 may have this reversed ...

    The repeat frequency of servo pulses is 16 ms (precisely) = 62.5 Hz.
    The order of which they are sent is ST, TH, CH3. There is a gap of 100 ns
    between the channel outputs.

        => This means we can change our algorithm: we can read the channels
        in sequence, when one is finished, we treat it as start for the
        next one.

    When the receiver is powered on, the servo output stays high until the
    first valid transmitter command is received. If the signal is lost during
    normal operation, the receiver outputs the programmed failsafe values.

    When the transmitter is powered up, it sends "neutral" values for ST and TH,
    and the initial position of CH3 (apparently it reads this directly during
    power up). The real data based on actual ST/TH position is only sent
    after the transmitter has booted (= showing its main operating screen).
    The boot time seems to be approx 4 seconds.

    The pin on the battery connector outputs a strange pulse that is the
    combination of all 3 servo pulses. The signal is high when idle and
    low during the signal pulse. Its falling edge is 700 ns after the start
    (rising edge) of the ST output, its rising edge is 100 ns after the
    end (falling edge) of the CH3 output.

    The receiver internally operates at 3.3V and 2.5V. The servo outputs
    are 3.3V.

Futaba R2104GF:
    EPA can be +/- 120 %
    Normal range (sub-trim and trim zero, 100% EPA): 1000 .. 1500 .. 2000

    The repeat frequency of servo pulses is 6.8 ms = 147 Hz! This is
    "fast mode". The normal mode is 13.63 ms according to documentation.

    CH1 and CH2 start their pulse at exactly the same time. CH3 and CH4 start
    together 300 ns after CH1 and CH2.

    The receiver internally operates at 3V and 1.8V. It uses TI CC2500 RF chip
    and a MSP430 microprocessor with a 26 MHz crystal.

    The battery connector signal pin has a wire to it, but there is no signal.
    Voltage range is specified to being 3.5V - 8.4V.
    Size: 39 x 26 x 10 mm


Servo processing:
=================
Given the TX/RX findings above, we will design the light controller
to expect a servo range of 800 .. 1500 .. 2300 us (1500 +/-700 us).

    Everything below 600 will be considered invalid.
    Everything between 600 and 800 will be clamped to 800.
    Everything between 2300 and 2500 will be clamped to 2300
    Everything above 2500 will be considered invalid.
    Defaults are 1000 .. 1500 .. 2000 us



CH3 processing:
Implement a Schmitt-Trigger around the center between the endpoints.
Example:
    Switch pos 0: 1000 us
    Switch pos 1: 2000 us
    Center is therefore   (2000 + 1000) / 2 = 1500 us
    Hysteresis:           (2000 - 1000) / 8 = 125 us
    If last switch position was pos 0:
        measured timing must be larger than 1500 + 125 = 1625 us to accept
        as pos 1
    If last switch position was pos 1:
        measured timing must be larger than 1500 - 125 = 1375 us to accept
        as pos 0
Accuracy is not important as we are dealing with a switch. Therefore we can
only use bits 11..4 (16 us resolution), so we can deal with 8-bit
calculations instead of 16-bit calculations.


Steering and Throttle processing:
We have:
    EPL (end point left)
    EPR (end point right)
    REV (flag that indicates servo reversing)
    CEN (neutral position)
        Margin for neutral position: +/- 5%
        Some speed controlled can configure this from 4..8%
    POS (measured servo pulse length)
To make processing easier we ensure that
    EPL > CEN > EPR must be true
This can be achieved with the REV flag that indicates when a channel is
reversed.
By default we assume that
    Throttle forward is EPR, backward EPL
    Steering left is EPL, Steering right is EPR

We need to convert POS into a range of
    -100 .. 0 .. +100   (left .. centre .. right)

If POS == CEN:           We found dead centre
    POS_NORMALIZED = 0
Else
    If POS > CEN:    We are dealing with a right turn
        POS_NORMALIZED = calculate(POS, EPR, CEN)
        If REV
            POS_NORMALIZED = 0 - POS_NORMALIZED
    Else             We are dealing with a left turn
        POS_NORMALIZED = calculate(POS, EPL, CEN)
        If not REV
            POS_NORMALIZED = 0 - POS_NORMALIZED

caluclate:  (inputs are POS, EP(L or R), CEN)
    If EP > CEN:
        If POS > EP      Clamp invald input
            return 100
        POS_NORMALIZED = ((POS - CEN) * 100 / (EP - CEN))
    Else:                EP < CEN
        If POS < EP      Clamp invald input
            return 100
        POS_NORMALIZED = (CEN - POS) * 100 / (CEN - EP)


Timer:
======
We need a way to measure time, e.g. for double click detection of ch3 and
to derive the blink frequency. For the PIC16F628 will use TIMER0 for generating
a low, steady frequency. TIMER0 will be set in such a way that within a
worst-case mainloop it can only overflow once. This means we will be able to
accurately measure longer periods of time.

To do so we select a pre-scaler of 1:256. This gives us a timer clock of
256 us. This means that the timer overflows every 65.536 ms.
We will use T0IF to detect overflow.
The blink frequency of 1.5 Hz can be easily derived: a single period is
5 timer overflows (333 ms / 65.536 ms).
For ease of implementation we can have several 8-bit variables that are
incremented every 64.536 ms. E.g. we can have one for blinking, that is
reset after it reaches "5", which toggles the blink flag.
We can have another one that we reset when we receive a CH3 pulse and
want to determine multiple clicks.

For modern PIC chips that operate at higher frequencies than 4 MHz TIMER0
is too fast. We use TIMER2 (or 4, or 6) instead which has a post scaler.
At 32 MHz even TIMER2 overflows every 32.768ms, so we need an additional
software-divider to generate the 65.536ms.


Steering wheel servo:
=====================
To allow easy reconfiguration of the steering wheel servo the user has to
toggle the CH3 button 8 times. The steering channel will then directly drive
the steering wheel servo output, allowing the user to set the center
position. Toggling CH3 once switches to "left end point". The user can
use the steering channel to set the left end point of the steering wheel
servo. Note that this may mean that the user has to turn the steering
channel to the right in case of servo reversing is needed! The user
confirms with toggling CH3 again, switching to "right end point" mode.
Once this is set, toggling CH3 stores all values persistently and switches
back to normal operation.

The slave controller accepts inputs of -120..0..+120, which it translates
to servo pulses 780..1500..2220 us. (This scales easily by multiplying
the servo value by 6, offsetting by 1500!)
The scaling will be done in the master.
The master stores 3 values for the steering wheel servo: left, centre and
right. Each of those may contain a value in the range of -120 to +120.
If the "steering" variable is 0 then it sends the centre value.
If the "steering" variable has a positive value it sends the interpolated
value:

    right - centre * 100
    -------------------- + centre
        abs(steering)

Note this needs to be a signed operation! If "steering" is negative then
'right' is replaced with 'left' in the formula above.



Combined Tail/Brake/Indicators
==============================
In the 1970s some US cars had only a single red light in the back that
served as tail light, brake light and indicators all at the same time. At
least that is how I remember seeing it in movies.
The Tamiya XR311 also has only a single light for tail/brake/indicator (plus
and additional reversing light), so I had to implement this function.


Tail       | Brake     | Indicator || Output
off        | off       | on  | off || high | off
half       | off       | on  | off || high | half
off        | high      | on  | off || high | half
half       | high      | on  | off || high | half
