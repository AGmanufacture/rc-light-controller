TO DO LIST for the RC Light Controller

* Add documentation about the different supported configurations

* Add documentation on how to build the firmware

* Add documentation how to build a new "car"

* Investigate whether we can detect the order of the incoming channels
  automatically.
  HK-310 and GT3B both send the servo signals in sequence (the GT3B has a 2us
  gap though), but the order is difference:
  - HK-310: ST - TH - CH3
  - GT3B: TH - ST - CH3
  - Futaba 4PL: outputs all channels simultanously

* Add a "horn" sound
    * Store in serial Flash or EEPROM
    * Invoke by toggling CH3 while steering is left/right
        * Different sounds for left/right?
    * Sound output may be at either master or slave configurable
    * Sound generation via PWM or DAC?
    * What output hardware / amplifier is needed?

Fix the issue with master and slave regarding UART RX usage in master for
the preprocessor use case.  


Patrick's Wraith:
* Configuration
    * Pre-processor in mini-receiver
    * Use Steering servo output for gear box
    * Use slave output for winch controller
* Lights
    * Main lights 3-clicks on/off
    * Roof lights
    * Brake lights
    * Indicators / Hazard lights
* Winch
    * Indications for winch mode: use indicators
    * Activate winch with 5-clicks
    * 2-clicks release the cable; 1-click retracts the cable
    * When winch is moving any change to CH3 stops the winch (don't wait for multiple clicks!)
    * Control from slave output
    * Show winch active by blinking indicators left/right
    * Beep winch when activated and de-activated
    * Send winch commands periodically in case of communication errors or reset problems
* Gearbox control
    * 1-click: low gear; 2-clicks: high gear    
    * Indications for gear mode: use flashing of roof lights
    * Only allow operation at low throttle
    * Only apply servo signal for a short time, but regularly to keep servo in position

LED sequencer:
- Table based
    - Needs to support multiple tables
    - Take care of table boundaries (http://www.piclist.com/techref/microchip/tables.htm)
    - Need to solve the issue of how to start/resume/change the sequencer
- Table stores differences compared to previous pattern (LED brightness)
    - At the start of the sequence all LEDs are off
- Table definition:
    - Byte based
    - Bit 7 indicates whether the other bits define an LED value or a delay
        - 1: LED value
        - 0: delay
    - End of table defined as 0x7f ("Delay 127")
    - Delay: 7 bits in soft timer units
        - Max delay is therefore 8.2 seconds
        - Delay 0 means delay for one mainloop (synchronized to servo read time ~20ms)
    - LED value:
        - 2 bits LED number 0..3
        - 5 bits LED value (multiply by 2 to get actual value)
            Smallest value is 650 uA (Rext set for 20 mA)

Test table: running light with 65ms interval
b'10011111'     ; LED 1 (left-most) on full brightness
b'00000001'     ; Delay 65ms (1 softtimer)
b'10000000'     ; LED 1 off
b'10111111'     ; LED 2 on
b'00000001'     ; Delay 65ms (1 softtimer)
b'10100000'     ; LED 2 off
b'11011111'     ; LED 3 on
b'00000001'     ; Delay 65ms (1 softtimer)
b'11000000'     ; LED 3 off
b'11111111'     ; LED 4 on
b'00000001'     ; Delay 65ms (1 softtimer)
b'11100000'     ; LED 4 off
b'11011111'     ; LED 3 on
b'00000001'     ; Delay 65ms (1 softtimer)
b'11000000'     ; LED 3 off
b'10111111'     ; LED 2 on
b'00000001'     ; Delay 65ms (1 softtimer)
b'10100000'     ; LED 2 off
b'01111111'     ; END OF TABLE

= 20 bytes



